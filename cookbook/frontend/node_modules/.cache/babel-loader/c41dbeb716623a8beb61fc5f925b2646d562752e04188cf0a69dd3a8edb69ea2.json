{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL;\n\n// Fetch all recipes\nexport const getRecipes = async () => {\n  const response = await fetch(`${API_URL}/recipes`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch recipes');\n  }\n  return response.json();\n};\n\n// Add a new recipe\nexport const addRecipe = async recipe => {\n  const response = await fetch(`${API_URL}/recipes`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(recipe)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to add recipe');\n  }\n};\n\n// Update an existing recipe\nexport const updateRecipe = async (id, updatedRecipe) => {\n  const response = await fetch(`${API_URL}/recipes/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updatedRecipe)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update recipe');\n  }\n};\n\n// Delete a recipe\nexport const deleteRecipe = async id => {\n  const response = await fetch(`${API_URL}/recipes/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete recipe');\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","getRecipes","response","fetch","ok","Error","json","addRecipe","recipe","method","headers","body","JSON","stringify","updateRecipe","id","updatedRecipe","deleteRecipe"],"sources":["C:/Users/danie/Documents/R0314-MERN/cookbook/frontend/src/services/api.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\r\n\r\n// Fetch all recipes\r\nexport const getRecipes = async () => {\r\n  const response = await fetch(`${API_URL}/recipes`);\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch recipes');\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// Add a new recipe\r\nexport const addRecipe = async (recipe) => {\r\n  const response = await fetch(`${API_URL}/recipes`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(recipe),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to add recipe');\r\n  }\r\n};\r\n\r\n// Update an existing recipe\r\nexport const updateRecipe = async (id, updatedRecipe) => {\r\n  const response = await fetch(`${API_URL}/recipes/${id}`, {\r\n    method: 'PATCH',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(updatedRecipe),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to update recipe');\r\n  }\r\n};\r\n\r\n\r\n\r\n// Delete a recipe\r\nexport const deleteRecipe = async (id) => {\r\n  const response = await fetch(`${API_URL}/recipes/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to delete recipe');\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;;AAE7C;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,UAAU,CAAC;EAClD,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,MAAM,IAAK;EACzC,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,UAAU,EAAE;IACjDY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,MAAM;EAC7B,CAAC,CAAC;EACF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EACzC;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,YAAY,GAAG,MAAAA,CAAOC,EAAE,EAAEC,aAAa,KAAK;EACvD,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,YAAYkB,EAAE,EAAE,EAAE;IACvDN,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,aAAa;EACpC,CAAC,CAAC;EACF,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC;;AAID;AACA,OAAO,MAAMY,YAAY,GAAG,MAAOF,EAAE,IAAK;EACxC,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,OAAO,YAAYkB,EAAE,EAAE,EAAE;IACvDN,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAI,CAACP,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}